% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/balance_weighted_diff.R
\name{weighted_diff}
\alias{weighted_diff}
\title{Helper function used within ’balance_weighted_diff()’ to calculate weighted standardized differences after PS adjustment}
\usage{
weighted_diff(
  data,
  data0,
  data1,
  score,
  treatment,
  method,
  normalized,
  standardize
)
}
\arguments{
\item{data}{A dataset or matrix containing baseline covariates}

\item{data0}{A dataset or matrix containing baseline covariates for unexposed group}

\item{data1}{A dataset or matrix containing baseline covariates for exposed group}

\item{score}{A dataset or matrix of fitted propensity score values (each column corresponds to predicted values from a different model)}

\item{treatment}{A vector of binary indicators indicating treatment status}

\item{method}{weighting method used to calculate weighted standardized differences}

\item{normalized}{boolean TRUE/FALSE to indicate use of normalized weights (default is TRUE)}
}
\value{
A numeric vector containing the standardized differences for each covariate after PS adjustment.
}
\description{
Helper function used within ’balance_weighted_diff()’ to calculate weighted standardized differences after PS adjustment
}
\details{
The weighted_diff() function is used within the balance_weighted_diff() function to calculate the adjusted standardized differences for each covariate.
}
\examples{
#load library
library(PSLassoSynthNC)

#creating some simulated data for testing
nstudy<- 2000
nvars<- 500
nc<- 100
ns<- nvars-(nc)
alpha_temp<- runif(nc, 0.0, 0.4)
beta_temp<- runif(nc, 0.0, 0.4)
random_neg<- sample(1:length(alpha_temp), 0.5*length(alpha_temp), replace=FALSE)
alpha_temp[random_neg]<- -1*alpha_temp[random_neg]
beta_temp[random_neg]<-  -1*beta_temp[random_neg]
alpha<-  matrix(c(alpha_temp, rep(0, ns)), ncol=1)
beta<-   matrix(c(beta_temp, rep(0, ns)), ncol=1)
betaE<- 0
cprev<- runif(nvars, 0, 0.3)
cprev<- sample(cprev)
oprev<- 0.05
tprev<- 0.4
Xcovs_sim<- matrix(rnorm((nstudy*nvars), 0, 1), nrow=nstudy, ncol=nvars)
Xcovs_sim<- as.data.frame(Xcovs_sim)  
names(Xcovs_sim)<- c(paste0('x', 1:nvars))
W<- as.matrix(Xcovs_sim)
colnames(W)<- c(paste0('x', 1:nvars))
linear_pred_e<- W \%*\% alpha
linear_pred_y<- W \%*\% beta
treatment_inc<- tprev
fn <- function(c) mean(plogis(c + linear_pred_e)) - treatment_inc
alpha0 <- uniroot(fn, lower = -20, upper = 20)$root
Ee <- (1 + exp( -(alpha0 + linear_pred_e) ))^-1
e<- rbinom(nstudy, 1, Ee)
outcome_inc<- oprev
fn <- function(c) mean(plogis(c + betaE*e + linear_pred_y  )) - outcome_inc
beta0 <- uniroot(fn, lower = -20, upper = 20)$root
Ey <- (1 + exp( -( beta0 + betaE*e + linear_pred_y )))^-1
y<- rbinom(nstudy, 1, Ey)
simdat <- as.data.frame(cbind(y, e, Ee, Xcovs_sim))

#creating folid vector for testing
N <- length(e)
V=10
n<- 1:length(e)
cvfolds<- stratifyCVFoldsByYandID(V=V, Y = e)
folds <- cvfolds$validRows
foldid <- cvfolds$fold_id

#running treatment_model() function
trt_out<- treatment_model(data=Xcovs_sim, treatment=e, foldid=foldid, alpha=1,lambda_ratio=.01, maxit=5000, nmodels=9)

#running weighted_diff function
ps_dat_crossfit<- trt_out[[2]][,1]
data0<- Xcovs_sim[e==0,]
data1<- Xcovs_sim[e==1,]
weighted_diff(data=Xcovs_sim, data0=data0, data1=data1, score=ps_dat_crossfit, treatment=e, method='ow', normalized=TRUE)
}
